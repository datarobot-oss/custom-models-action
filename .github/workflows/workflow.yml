# This is a basic workflow to help you get started with Actions

name: Workflow CI/CD

# Controls when the workflow will run
on:
  pull_request:
    branches: [ master ]
    types: [ opened, synchronize, reopened, edited ]
  push:
    branches: [ master ]

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

concurrency:
  group: ${{ github.workflow }}
  cancel-in-progress: true

env:
  LOGLEVEL: debug
  DATAROBOT_API_TOKEN: ${{ secrets.DATAROBOT_API_TOKEN }}  # Required by the functional tests
  DATAROBOT_WEBSERVER: ${{ secrets.DATAROBOT_WEBSERVER }}  # Required by the functional tests
  INSPECT_CONTEXT: false
  OUT_DIR: output-context/${{ github.event_name }}

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  # This workflow contains a single job called "build"
  validate-code-style:
    # Run this job on any action of a PR, but skip the job upon merge to master
    # if: github.event.pull_request.merged != true

    # The type of runner that the job will run on
    runs-on: ubuntu-latest

    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - uses: actions/checkout@v3

      - name: Install Requirements
        run: pip install -r ${{ github.workspace }}/tests/requirements.txt

      - name: Check source code format (pycodestyle + black)
        run: make lint

      # Print out context information
      - name: Inspect context

        if: ${{ env.INSPECT_CONTEXT == 'true' }}

        run: |
          mkdir -p $OUT_DIR
          echo Save github context vital information
          echo "github.event_name:                  ${{ github.event_name }}" >> $OUT_DIR/github_context.txt
          echo "github.event.pull_request.merged:   ${{ github.event.pull_request.merged }}" >> $OUT_DIR/github_context.txt
          echo "" >> $OUT_DIR/github_context.txt
          echo "github.sha:                         ${{ github.sha }}" >> $OUT_DIR/github_context.txt
          echo "github.pull_request.head.sha:       ${{ github.pull_request.head.sha }}" >> $OUT_DIR/github_context.txt
          echo "github.event.after:                 ${{ github.event.after }}" >> $OUT_DIR/github_context.txt
          echo "github.event.before:                ${{ github.event.before }}" >> $OUT_DIR/github_context.txt
          echo "github.event.pull_request.head.sha: ${{ github.event.pull_request.head.sha }}" >> $OUT_DIR/github_context.txt
          echo "github.event.pull_request.base.sha: ${{ github.event.pull_request.base.sha }}" >> $OUT_DIR/github_context.txt
          echo "" >> $OUT_DIR/github_context.txt

          echo "github.ref:           ${{ github.ref }}" >> $OUT_DIR/github_context.txt
          echo "github.ref_name:      ${{ github.ref_name }}" >> $OUT_DIR/github_context.txt
          echo "github.head_ref:      ${{ github.head_ref }}" >> $OUT_DIR/github_context.txt
          echo "github.base_ref:      ${{ github.base_ref }}" >> $OUT_DIR/github_context.txt
          echo "" >> $OUT_DIR/github_context.txt

          echo "github.repository:    ${{ github.repository }}" >> $OUT_DIR/github_context.txt
          echo "github.workspace:    ${{ github.workspace }}" >> $OUT_DIR/github_context.txt

          echo "The github context is:"
          echo "${{ toJson(github) }}" >> $OUT_DIR/github_context.json
          echo ""

      - uses: actions/upload-artifact@v3
        if: ${{ env.INSPECT_CONTEXT == 'true' }}
        with:
          name: Context info artifact
          path: output-context

  run-unit-tests:
    # Run this job on any action of a PR, but skip the job upon merge to master
    if: github.event.pull_request.merged != true

    # The type of runner that the job will run on
    runs-on: ubuntu-latest

    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - uses: actions/checkout@v3

      - name: Install Requirements
        run: pip install -r ${{ github.workspace }}/tests/requirements.txt

      - name: Run unit-tests
        run: make test

  run-functional-test:
    needs: [run-unit-tests, validate-code-style]

    # The type of runner that the job will run on
    runs-on: ubuntu-latest

    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
      - name: Check run state for functional tests
        id: functional-tests-state
        run: |
          body=$(cat <<"EOF"
          ${{github.event.pull_request.body}}
          EOF
          )
          if grep '.*\- \[\s*x\s*\] Skip functional tests.*' <<< "${body}" > /dev/null; then
            echo "The user decided to skip the functional tests."
            echo "FUNCTIONAL_TESTS_RUN_STATE=skip" >> $GITHUB_OUTPUT
          elif grep '.*\- \[\s*x\s*\] Run all functional tests.*' <<< "${body}" > /dev/null; then
            echo "Run all functional tests."
            echo "FUNCTIONAL_TESTS_RUN_STATE=all" >> $GITHUB_OUTPUT
          else
            echo "Run a basic functional test."
            echo "FUNCTIONAL_TESTS_RUN_STATE=basic" >> $GITHUB_OUTPUT
          fi

      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - uses: actions/checkout@v3
        if: ${{ steps.functional-tests-state.outputs.FUNCTIONAL_TESTS_RUN_STATE != 'skip' }}

      - name: Install Requirements
        run: pip install -r ${{ github.workspace }}/tests/requirements.txt
        if: ${{ steps.functional-tests-state.outputs.FUNCTIONAL_TESTS_RUN_STATE != 'skip' }}

      - name: Run functional test(s)
        if: ${{ steps.functional-tests-state.outputs.FUNCTIONAL_TESTS_RUN_STATE != 'skip' }}
        run: |
          if ${{ steps.functional-tests-state.outputs.FUNCTIONAL_TESTS_RUN_STATE == 'all' }}; then
            make test-functional
          else
            make test-functional-basic
          fi
